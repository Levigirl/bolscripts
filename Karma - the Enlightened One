if myHero.charName ~= "Karma"  or not VIP_USER then return end
local version = 0.2
local AUTOUPDATE = true
local SCRIPT_NAME = "Karma - the Enlightened One"
require 'VPrediction'
require 'SOW'
require 'Collision'
require 'Prodiction'

local Prodict = ProdictManager.GetInstance()
local ProdictQ
local ProdictQCol
-- Constants --
local ignite, igniteReady = nil, nil
local ts = nil
local VP = nil
local qOff, wOff, eOff, rOff = 0,0,0,0
local abilitySequence = {1,3,2,1,1,4,1,3,1,3,4,3,2,2,2,4,2,3}
local Ranges = { AA = 525 }
local skills = {
	SkillQ = { ready = true, name = "Inner Flame", range = 1000, delay = 0.25, speed = 1800.0, width = 70.0 },
	SkillW = { ready = true, name = "Focused Resolve", range = 675, delay = nil, speed = nil, width = nil },
	SkillE = { ready = true, name = "Inspire", range = 800, delay = nil, speed = nil, width = nil },
	SkillR = { ready = true, name = "Mantra", range = nil, delay = nil, speed = nil, width = nil },
}
--[[ Slots Itens ]]--
ScriptName = "Karma"
-- These variables need to be near the top of your script so you can call them in your callbacks.
HWID = Base64Encode(tostring(os.getenv("PROCESSOR_IDENTIFIER")..os.getenv("USERNAME")..os.getenv("COMPUTERNAME")..os.getenv("PROCESSOR_LEVEL")..os.getenv("PROCESSOR_REVISION")))
-- DO NOT CHANGE. This is set to your proper ID.
id = 244

-- CHANGE ME. Make this the exact same name as the script you added into the site!
ScriptName = "Karma"

-- Thank you to Roach and Bilbao for the support!
assert(load(Base64Decode("G0x1YVIAAQQEBAgAGZMNChoKAAAAAAAAAAAAAQIDAAAAJQAAAAgAAIAfAIAAAQAAAAQKAAAAVXBkYXRlV2ViAAEAAAACAAAADAAAAAQAETUAAAAGAUAAQUEAAB2BAAFGgUAAh8FAAp0BgABdgQAAjAHBAgFCAQBBggEAnUEAAhsAAAAXwAOAjMHBAgECAgBAAgABgUICAMACgAEBgwIARsNCAEcDwwaAA4AAwUMDAAGEAwBdgwACgcMDABaCAwSdQYABF4ADgIzBwQIBAgQAQAIAAYFCAgDAAoABAYMCAEbDQgBHA8MGgAOAAMFDAwABhAMAXYMAAoHDAwAWggMEnUGAAYwBxQIBQgUAnQGBAQgAgokIwAGJCICBiIyBxQKdQQABHwCAABcAAAAECAAAAHJlcXVpcmUABAcAAABzb2NrZXQABAcAAABhc3NlcnQABAQAAAB0Y3AABAgAAABjb25uZWN0AAQQAAAAYm9sLXRyYWNrZXIuY29tAAMAAAAAAABUQAQFAAAAc2VuZAAEGAAAAEdFVCAvcmVzdC9uZXdwbGF5ZXI/aWQ9AAQHAAAAJmh3aWQ9AAQNAAAAJnNjcmlwdE5hbWU9AAQHAAAAc3RyaW5nAAQFAAAAZ3N1YgAEDQAAAFteMC05QS1aYS16XQAEAQAAAAAEJQAAACBIVFRQLzEuMA0KSG9zdDogYm9sLXRyYWNrZXIuY29tDQoNCgAEGwAAAEdFVCAvcmVzdC9kZWxldGVwbGF5ZXI/aWQ9AAQCAAAAcwAEBwAAAHN0YXR1cwAECAAAAHBhcnRpYWwABAgAAAByZWNlaXZlAAQDAAAAKmEABAYAAABjbG9zZQAAAAAAAQAAAAAAEAAAAEBvYmZ1c2NhdGVkLmx1YQA1AAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAMAAAADAAAAAwAAAAMAAAAEAAAABAAAAAUAAAAFAAAABQAAAAYAAAAGAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAgAAAAHAAAABQAAAAgAAAAJAAAACQAAAAkAAAAKAAAACgAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAAMAAAACwAAAAkAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAGAAAAAgAAAGEAAAAAADUAAAACAAAAYgAAAAAANQAAAAIAAABjAAAAAAA1AAAAAgAAAGQAAAAAADUAAAADAAAAX2EAAwAAADUAAAADAAAAYWEABwAAADUAAAABAAAABQAAAF9FTlYAAQAAAAEAEAAAAEBvYmZ1c2NhdGVkLmx1YQADAAAADAAAAAIAAAAMAAAAAAAAAAEAAAAFAAAAX0VOVgA="), nil, "bt", _ENV))()
			
      
local tiamatSlot, hydraSlot, youmuuSlot, bilgeSlot, bladeSlot, dfgSlot, divineSlot = nil, nil, nil, nil, nil, nil, nil
local tiamatReady, hydraReady, youmuuReady, bilgeReady, bladeReady, dfgReady, divineReady = nil, nil, nil, nil, nil, nil, nil

--[[Auto Attacks]]--
local lastBasicAttack = 0
local swingDelay = 0.25
local swing = false




--[[Misc]]--
local lastSkin = 0
local isSAC = false
local isMMA = false
local target = nil
--Credit Trees
function GetCustomTarget()
	ts:update()
	if _G.MMA_Target and _G.MMA_Target.type == myHero.type then return _G.MMA_Target end
	if _G.AutoCarry and _G.AutoCarry.Crosshair and _G.AutoCarry.Attack_Crosshair and _G.AutoCarry.Attack_Crosshair.target and _G.AutoCarry.Attack_Crosshair.target.type == myHero.type then return _G.AutoCarry.Attack_Crosshair.target end
	return ts.target
end
function OnLoad()
	if _G.ScriptLoaded then	return end
	_G.ScriptLoaded = true
	initComponents()
  UpdateWeb(true, ScriptName, id, HWID)
  
  end

function initComponents()
  Prod = ProdictManager.GetInstance()
  ProdQ = Prod:AddProdictionObject(_Q, 1000, 1800, 0.250, 70)    
  qPos = nil
  
    -- VPrediction Start
 VP = VPrediction()
   -- SOW Declare
   Orbwalker = SOW(VP)
  -- Target Selector
   ts = TargetSelector(TARGET_LESS_CAST_PRIORITY, 900)
  
 Menu = scriptConfig("Karma - the Enlightened One by SyraX", "KarmaMA")

   if _G.MMA_Loaded ~= nil then
     PrintChat("<font color = \"#33CCCC\">MMA Status:</font> <font color = \"#fff8e7\"> Loaded</font>")
     isMMA = true
 elseif _G.AutoCarry ~= nil then
      PrintChat("<font color = \"#33CCCC\">SAC Status:</font> <font color = \"#fff8e7\"> Loaded</font>")
     isSAC = true
 else
     PrintChat("<font color = \"#33CCCC\">OrbWalker not found:</font> <font color = \"#fff8e7\"> Loading SOW</font>")
       Menu:addSubMenu("["..myHero.charName.." - Orbwalker]", "SOWorb")
       Orbwalker:LoadToMenu(Menu.SOWorb)
    end
  
 Menu:addSubMenu("["..myHero.charName.." - Combo]", "KarmaCombo")
    Menu.KarmaCombo:addParam("combo", "Combo mode", SCRIPT_PARAM_ONKEYDOWN, false, 32)
    Menu.KarmaCombo:addSubMenu("Q Settings", "qSet")
  Menu.KarmaCombo.qSet:addParam("useQ", "Use Q in combo", SCRIPT_PARAM_ONOFF, true)
 Menu.KarmaCombo:addSubMenu("W Settings", "wSet")
  Menu.KarmaCombo.wSet:addParam("useW", "Use W", SCRIPT_PARAM_ONOFF, false)
 Menu.KarmaCombo:addSubMenu("E Settings", "eSet")
  Menu.KarmaCombo.eSet:addParam("useE", "Use E in combo", SCRIPT_PARAM_ONOFF, true)
 Menu.KarmaCombo:addSubMenu("R Settings", "rSet")
  Menu.KarmaCombo.rSet:addParam("useR", "Use Smart Ultimate", SCRIPT_PARAM_ONOFF, true)
 
 Menu:addSubMenu("["..myHero.charName.." - Harass]", "Harass")
  Menu.Harass:addParam("harass", "Harass", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("G"))
  Menu.Harass:addParam("useQ", "Use Q in Harass", SCRIPT_PARAM_ONOFF, true)
    Menu.Harass:addParam("useW", "Use W in Harass", SCRIPT_PARAM_ONOFF, false)
   Menu.Harass:addParam("useE", "Use E in Harass", SCRIPT_PARAM_ONOFF, true)
   Menu.Harass:addParam("useR", "Use R in Harass", SCRIPT_PARAM_ONOFF, true)
    
 Menu:addSubMenu("["..myHero.charName.." - Laneclear]", "Laneclear")
    Menu.Laneclear:addParam("lclr", "Laneclear Key", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("V"))
  Menu.Laneclear:addParam("useClearQ", "Use Q in Laneclear", SCRIPT_PARAM_ONOFF, true)
 Menu.Laneclear:addParam("useClearW", "Use W in Laneclear", SCRIPT_PARAM_ONOFF, false)
    Menu.Laneclear:addParam("useClearE", "Use E in Laneclear", SCRIPT_PARAM_ONOFF, true)
 
 Menu:addSubMenu("["..myHero.charName.." - Jungleclear]", "Jungleclear")
    Menu.Jungleclear:addParam("jclr", "Jungleclear Key", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("V"))
  Menu.Jungleclear:addParam("useClearQ", "Use Q in Jungleclear", SCRIPT_PARAM_ONOFF, true)
 Menu.Jungleclear:addParam("useClearW", "Use W in Jungleclear", SCRIPT_PARAM_ONOFF, false)
    Menu.Jungleclear:addParam("useClearE", "Use E in Jungleclear", SCRIPT_PARAM_ONOFF, true)
    
 Menu:addSubMenu("["..myHero.charName.." - Shield options]", "shield")
 Menu.shield:addParam("Shieldd", "Shield Your Self", SCRIPT_PARAM_ONOFF, false)
 
       Menu:addSubMenu("["..myHero.charName.." - Prodiction Settings]", "ProdSettings") -- Menu.ProdSettings.SelectProdiction
 -- Menu.selectProdSettings == 1 or 2
	Menu.ProdSettings:addParam("SelectProdiction", "Select Prodiction", SCRIPT_PARAM_LIST, 1, {"Prodiction", "VPrediction"})
 -- Menu.ProdSettings:addParam("OD", "OnDash", SCRIPT_PARAM_ONOFF, false)
  --Menu.ProdSettings:addParam("AD", "AfterDash", SCRIPT_PARAM_ONOFF, false)
 -- Menu.ProdSettings:addParam("AI", "AfterImmobile", SCRIPT_PARAM_ONOFF, false)
  --Menu.ProdSettings:addParam("OI", "OnImmobile ", SCRIPT_PARAM_ONOFF, false)
 -- Menu.ProdSettings.OD
 
 

 
 Menu:addSubMenu("["..myHero.charName.." - Additionals]", "Ads")
 Menu.Ads:addParam("Escp", "Escape Key Use whit spacebar", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("Z"))
    Menu.Ads:addParam("autoLevel", "Auto-Level Spells", SCRIPT_PARAM_ONOFF, false)
   Menu.Ads:addSubMenu("Killsteal", "KS")
   Menu.Ads.KS:addParam("ignite", "Use Ignite", SCRIPT_PARAM_ONOFF, false)
   Menu.Ads.KS:addParam("KSQ", "Use Q to KS", SCRIPT_PARAM_ONOFF, false)
   Menu.Ads.KS:addParam("KSRQ", "Use R + Q Combo", SCRIPT_PARAM_ONOFF, false)
   Menu.Ads.KS:addParam("AUTOQ","OnGapclose Q", SCRIPT_PARAM_ONOFF, false)
  Menu.Ads.KS:addParam("igniteRange", "Minimum range to cast Ignite", SCRIPT_PARAM_SLICE, 470, 0, 600, 0)
  Menu.Ads:addSubMenu("VIP", "VIP")
    Menu.Ads.VIP:addParam("skin", "Use custom skin", SCRIPT_PARAM_ONOFF, false)
  Menu.Ads.VIP:addParam("skin1", "Skin changer", SCRIPT_PARAM_SLICE, 1, 1, 4)
    
 Menu:addSubMenu("["..myHero.charName.." - Target Selector]", "targetSelector")
 Menu.targetSelector:addTS(ts)
    ts.name = "Focus"
  
 Menu:addSubMenu("["..myHero.charName.." - Drawings]", "drawings")
  Menu.drawings:addParam("drawAA", "Draw AA Range", SCRIPT_PARAM_ONOFF, true)
  Menu.drawings:addParam("drawQ", "Draw Q Range", SCRIPT_PARAM_ONOFF, true)
    Menu.drawings:addParam("drawW", "Draw W Range", SCRIPT_PARAM_ONOFF, true)
    Menu.drawings:addParam("drawE", "Draw E Range", SCRIPT_PARAM_ONOFF, true)
    Menu.drawings:addParam("drawR", "Draw R Range", SCRIPT_PARAM_ONOFF, true)
    
 targetMinions = minionManager(MINION_ENEMY, 360, myHero, MINION_SORT_MAXHEALTH_DEC)
  allyMinions = minionManager(MINION_ALLY, 360, myHero, MINION_SORT_MAXHEALTH_DEC)
 jungleMinions = minionManager(MINION_JUNGLE, 360, myHero, MINION_SORT_MAXHEALTH_DEC)
 
 if Menu.Ads.VIP.skin and VIP_USER then
       GenModelPacket("Karma", Menu.Ads.VIP.skin1)
     lastSkin = Menu.Ads.VIP.skin1
    end
       for i = 1, heroManager.iCount do
    local hero = heroManager:GetHero(i)
      if hero.team ~= myHero.team then
        
        ProdQ:GetPredictionAfterDash(hero, AfterDashFunc)
        
      
        
      end
    end
	
  
 PrintChat("<font color = \"#33CCCC\">Karma - the Enlightened One by</font> <font color = \"#fff8e7\">SyraX V"..version.."</font>")
end

local Mantra = false
local time = math.huge

function OnTick()
	target = GetCustomTarget()
	targetMinions:update()
	allyMinions:update()
	jungleMinions:update()
	CDHandler()
	KillSteal()
  DamageCalculation()
  
  if time + 8 < GetGameTimer() then
      Mantraa = false
  end
  
	if Menu.Ads.VIP.skin and VIP_USER and skinChanged() then
		GenModelPacket("Karma", Menu.Ads.VIP.skin1)
		lastSkin = Menu.Ads.VIP.skin1
	end
  
  -- Make a callback which continuesly keeps track of the predicted pos from the callback to see what it does.
  if ValidTarget(target) then
    ProdQ:GetPredictionCallBack(target, GetQPos)
    
  else
    qPos = nil
    
  end
    
    -- Cast our "combo"
   -- if Menu.AhriCombo.eSet.useE or Menu.Harass.useE then
     -- if Menu.ProdSettings.SelectProdiction == 1 then
      --  if ValidTarget(target) then
                  --  ProdQ:GetPredictionCallBack(target, Cast)
                --    ProdE:GetPredictionCallBack(target, Cast)
        --end
    --end
    --end
  -- Enable/Disable certain callbacks when turned on/off by the menu.
    for i = 1, heroManager.iCount do
        local hero = heroManager:GetHero(i)
        if hero.team ~= myHero.team then
           
            
          
            
            

        end
    end
    OnDashPos = nil
    AfterDashPos = nil
    AfterImmobilePos = nil
    OnImmobilePos = nil
    
	if Menu.Ads.autoLevel then
		AutoLevel()
	end
	
	if Menu.KarmaCombo.combo then
		Combo()
	end
	
	if Menu.Harass.harass then
		Harass()
	end
	
	if Menu.Laneclear.lclr then
		LaneClear()
	end
	
	if Menu.Jungleclear.jclr then
		JungleClear()
	end
  
  if Menu.KarmaCombo.combo and Menu.ProdSettings.SelectProdiction == 1 then
		ComboP()
	end
  if Menu.Harass.harass and Menu.ProdSettings.SelectProdiction == 1 then
		HarrasP()
	end
  
  

end









function CDHandler()
	-- Spells
	skills.SkillQ.ready = (myHero:CanUseSpell(_Q) == READY)
	skills.SkillW.ready = (myHero:CanUseSpell(_W) == READY)
	skills.SkillE.ready = (myHero:CanUseSpell(_E) == READY)
	skills.SkillR.ready = (myHero:CanUseSpell(_R) == READY)

	-- Items
	tiamatSlot = GetInventorySlotItem(3077)
	hydraSlot = GetInventorySlotItem(3074)
	youmuuSlot = GetInventorySlotItem(3142) 
	bilgeSlot = GetInventorySlotItem(3144)
	bladeSlot = GetInventorySlotItem(3153)
	dfgSlot = GetInventorySlotItem(3128)
	divineSlot = GetInventorySlotItem(3131)
	
	tiamatReady = (tiamatSlot ~= nil and myHero:CanUseSpell(tiamatSlot) == READY)
	hydraReady = (hydraSlot ~= nil and myHero:CanUseSpell(hydraSlot) == READY)
	youmuuReady = (youmuuSlot ~= nil and myHero:CanUseSpell(youmuuSlot) == READY)
	bilgeReady = (bilgeSlot ~= nil and myHero:CanUseSpell(bilgeSlot) == READY)
	bladeReady = (bladeSlot ~= nil and myHero:CanUseSpell(bladeSlot) == READY)
	dfgReady = (dfgSlot ~= nil and myHero:CanUseSpell(dfgSlot) == READY)
	divineReady = (divineSlot ~= nil and myHero:CanUseSpell(divineSlot) == READY)

	-- Summoners
	if myHero:GetSpellData(SUMMONER_1).name:find("SummonerDot") then
		ignite = SUMMONER_1
	elseif myHero:GetSpellData(SUMMONER_2).name:find("SummonerDot") then
		ignite = SUMMONER_2
	end
	igniteReady = (ignite ~= nil and myHero:CanUseSpell(ignite) == READY)


if GetGame().isOver then
	UpdateWeb(false, ScriptName, id, HWID)
	-- This is a var where I stop executing what is in my OnTick()
	startUp = false;
end
end
	-- Harass --

function Harass()	
	if target ~= nil and ValidTarget(target) and Menu.ProdSettings.SelectProdiction == 2 then
    if skills.SkillR.ready and Menu.Harass.useR then
			CastSpell(_R)
      
		end
		if Menu.Harass.useQ and ValidTarget(target, skills.SkillQ.range) and skills.SkillQ.ready then
			local CastPosition,  HitChance,  Position = VP:GetLineCastPosition(target, skills.SkillQ.delay, skills.SkillQ.width, skills.SkillQ.range, skills.SkillQ.speed, myHero, true)
        if HitChance >= 2 and GetDistance(CastPosition) < 1000 then
				 CastSpell(_Q, CastPosition.x, CastPosition.z)
        end
    end
		if Menu.Harass.useW and ValidTarget(target, skills.SkillW.range) and skills.SkillW.ready then
			CastSpell(_W, target)
		end
		
	end
	
end

-- End Harass --


-- Combo Selector --

function Combo()
	local typeCombo = 0
	if target ~= nil then
		AllInCombo(target, 0)
	end
	
end

-- Combo Selector --

function OnGapclose(target)
  if target ~= nil then
    
    local CastPosition,  HitChance,  Position = VP:GetCircularCastPosition(target, skills.SkillQ.delay, skills.SkillQ.width, skills.SkillQ.range, skills.SkillQ.speed, myHero, true)
          if skills.SkillQ.ready and  HitChance >= 2 and GetDistance(CastPosition) < 500 then
            CastSpell(_Q, CastPosition.x, CastPosition.z)
            if skills.SkillW.ready and not Mantra then
              CastSpell(_W, target)
            end
          end
         
            
		
	end
end


-- Dynamic combo


 

function AllInCombo(target, typeCombo)
	if target ~= nil and typeCombo == 0 and Menu.ProdSettings.SelectProdiction == 2 then
		ItemUsage(target)
		if skills.SkillR.ready and Menu.KarmaCombo.rSet.useR then
			CastSpell(_R)
      
		end

		if Menu.KarmaCombo.qSet.useQ  and ValidTarget(target, skills.SkillR.range) and skills.SkillQ.ready then
			local CastPosition,  HitChance,  Position = VP:GetLineCastPosition(target, skills.SkillQ.delay, skills.SkillQ.width, skills.SkillQ.range, skills.SkillQ.speed, myHero, true)
        if HitChance >= 2 and GetDistance(CastPosition) < 1000 then
				 CastSpell(_Q, CastPosition.x, CastPosition.z)
        end
   
    end
        
		
    

		if Menu.KarmaCombo.wSet.useW and ValidTarget(target, skills.SkillW.range) and skills.SkillW.ready and not Mantra then
		    CastSpell(_W, target)
		end

		
	end
  end
  

-- All In Combo --


function LaneClear()
	for i, minion in pairs(targetMinions.objects) do
		if minion ~= nil then
			if Menu.Laneclear.useClearQ and skills.SkillQ.ready and ValidTarget(minion, skills.SkillQ.range) then
       -- print("kip")
				CastSpell(_Q, minion.x, minion.z)
			end
		
			
			
		end
		
	end
end

function JungleClear()
	for i, jungleMinion in pairs(jungleMinions.objects) do
		if jungleMinion ~= nil then
			if Menu.Jungleclear.useClearQ and skills.SkillQ.ready and ValidTarget(jungleMinion, skills.SkillQ.range) then
				CastSpell(_Q, jungleMinion.x, jungleMinion.z)
			end
			
			end
		end
	end


-- autoLVL follow by best build i will change every time there somting change

function AutoLevel()
	local qL, wL, eL, rL = player:GetSpellData(_Q).level + qOff, player:GetSpellData(_W).level + wOff, player:GetSpellData(_E).level + eOff, player:GetSpellData(_R).level + rOff
	if qL + wL + eL + rL < player.level then
		local spellSlot = { SPELL_1, SPELL_2, SPELL_3, SPELL_4, }
		local level = { 0, 0, 0, 0 }
		for i = 1, player.level, 1 do
			level[abilitySequence[i]] = level[abilitySequence[i]] + 1
		end
		for i, v in ipairs({ qL, wL, eL, rL }) do
			if v < level[i] then LevelSpell(spellSlot[i]) end
		end
	end
end


-- shortcut to some functions
function KillSteal()
	if Menu.Ads.KS.ignite then
		IgniteKS()
	end
  if Menu.Ads.KS.KSQ then
    GekkeKSQ()
  end
  if Menu.Ads.KS.KSRQ then
    GekkeKSRQ()
  end
  if Menu.Ads.KS.AUTOQ then
    OnGapclose(target)
  end
  if Menu.Ads.Escp then
    ChaceMode()
  end    
end

-- Auto Ignite get the maximum range to avoid over kill --

function IgniteKS()
	if igniteReady then
		local Enemies = GetEnemyHeroes()
		for i, val in ipairs(Enemies) do
			if ValidTarget(val, 600) then
				if getDmg("IGNITE", val, myHero) > val.health and GetDistance(val) >= Menu.Ads.KS.igniteRange then
					CastSpell(ignite, val)
				end
			end
		end
	end
end

-- heavy ignite standaard shit
-- health check 
function HealthCheck(unit, HealthValue)
	if unit.health > (unit.maxHealth * (HealthValue/100)) then 
		return true
	else
		return false
	end
end


-- Cast items
function ItemUsage(target)

	if dfgReady then CastSpell(dfgSlot, target) end
	if youmuuReady then CastSpell(youmuuSlot, target) end
	if bilgeReady then CastSpell(bilgeSlot, target) end
	if bladeReady then CastSpell(bladeSlot, target) end
	if divineReady then CastSpell(divineSlot, target) end

end

-- Change skin function, made by Shalzuth thx to this guy
function GenModelPacket(champ, skinId)
	p = CLoLPacket(0x97)
	p:EncodeF(myHero.networkID)
	p.pos = 1
	t1 = p:Decode1()
	t2 = p:Decode1()
	t3 = p:Decode1()
	t4 = p:Decode1()
	p:Encode1(t1)
	p:Encode1(t2)
	p:Encode1(t3)
	p:Encode1(bit32.band(t4,0xB))
	p:Encode1(1)--hardcode 1 bitfield
	p:Encode4(skinId)
	for i = 1, #champ do
		p:Encode1(string.byte(champ:sub(i,i)))
	end
	for i = #champ + 1, 64 do
		p:Encode1(0)
	end
	p:Hide()
	RecvPacket(p)
end
-- still skin changer
function skinChanged()
	return Menu.Ads.VIP.skin1 ~= lastSkin
end
-- draw my ass
function DrawCircleNextLvl(x, y, z, radius, width, color, chordlength)
 radius = radius or 300
 quality = math.max(8,math.floor(180/math.deg((math.asin((chordlength/(2*radius)))))))
 quality = 2 * math.pi / quality
 radius = radius*.92
 local points = {}
 for theta = 0, 2 * math.pi + quality, quality do
  local c = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta)))
  points[#points + 1] = D3DXVECTOR2(c.x, c.y)
 end
 DrawLines2(points, width or 1, color or 4294967295)
end

function DrawCircle2(x, y, z, radius, color)
 local vPos1 = Vector(x, y, z)
 local vPos2 = Vector(cameraPos.x, cameraPos.y, cameraPos.z)
 local tPos = vPos1 - (vPos1 - vPos2):normalized() * radius
 local sPos = WorldToScreen(D3DXVECTOR3(tPos.x, tPos.y, tPos.z))
 if OnScreen({ x = sPos.x, y = sPos.y }, { x = sPos.x, y = sPos.y })  then
  self:DrawCircleNextLvl(x, y, z, radius, 1, color, 75)
 end
end

function CircleDraw(x,y,z,radius, color)
	self:DrawCircle2(x, y, z, radius, color)
end--[[ Kill Text ]]--
TextList = {"Harass him", "Q", "W", "E", "ULT HIM !", "Items", "All In", "Skills Not Ready"}
KillText = {}
colorText = ARGB(229,229,229,0)
_G.ShowTextDraw = true

-- Damage Calculation Thanks Skeem for the base --
-- maybe later i fix kill text its most useless thing in bol i cuz
function DamageCalculation()
  for i=1, heroManager.iCount do
    local enemy = heroManager:GetHero(i)
    if ValidTarget(enemy) and enemy ~= nil then
      qDmg = getDmg("Q", enemy,myHero)
      wDmg = getDmg("W", enemy,myHero)
      eDmg = getDmg("E", enemy,myHero)
      rDmg = getDmg("R", enemy,myHero)
      dfgDmg = getDmg("DFG", enemy, myHero)

      if not skills.SkillQ.ready and not skills.SkillW.ready and not skills.SkillE.ready and not skills.SkillR.ready then
        KillText[i] = TextList[8]
        return
      end

      if enemy.health <= qDmg then
        KillText[i] = TextList[2]
      elseif enemy.health <= wDmg then
        KillText[i] = TextList[3]
      elseif enemy.health <= eDmg then
        KillText[i] = TextList[4]
      elseif enemy.health <= rDmg then
        KillText[i] = TextList[5]
      elseif enemy.health <= qDmg + wDmg then
        KillText[i] = TextList[2] .."+".. TextList[3]
      elseif enemy.health <= qDmg + eDmg then
        KillText[i] = TextList[2] .."+".. TextList[4]
      elseif enemy.health <= qDmg + rDmg then
        KillText[i] = TextList[2] .."+".. TextList[5]
      elseif enemy.health <= wDmg + eDmg then
        KillText[i] = TextList[3] .."+".. TextList[4]
      elseif enemy.health <= wDmg + rDmg then
        KillText[i] = TextList[3] .."+".. TextList[5]
      elseif enemy.health <= eDmg + rDmg then
        KillText[i] = TextList[4] .."+".. TextList[5]
      elseif enemy.health <= qDmg + wDmg + eDmg then
        KillText[i] = TextList[2] .."+".. TextList[3] .."+".. TextList[4]
      elseif enemy.health <= qDmg + wDmg + eDmg + rDmg then
        KillText[i] = TextList[2] .."+".. TextList[3] .."+".. TextList[4] .."+".. TextList[5]
      elseif enemy.health <= dfgDmg + ((qDmg + wDmg + eDmg + rDmg) + (0.2 * (qDmg + wDmg + eDmg + rDmg))) then
        KillText[i] = TextList[7]
      else
        KillText[i] = TextList[1]
      end
    end
  end
end
--draw it
function OnDraw()    if not myHero.dead then
        if Menu.drawings.drawAA then DrawCircle(myHero.x, myHero.y, myHero.z, Ranges.AA, ARGB(25 , 125, 125, 125)) end
        if Menu.drawings.drawQ then DrawCircle(myHero.x, myHero.y, myHero.z, skills.SkillQ.range, ARGB(25 , 125, 125, 125)) end
        if Menu.drawings.drawW then DrawCircle(myHero.x, myHero.y, myHero.z, skills.SkillW.range, ARGB(25 , 125, 125, 125)) end
        if Menu.drawings.drawE then DrawCircle(myHero.x, myHero.y, myHero.z, skills.SkillE.range, ARGB(25 , 125, 125, 125)) end
    end
if _G.ShowTextDraw then
    for i = 1, heroManager.iCount do
	    local enemy = heroManager:GetHero(i)
	    if ValidTarget(enemy) and enemy ~= nil then
	      local barPos = WorldToScreen(D3DXVECTOR3(enemy.x, enemy.y, enemy.z)) --(Credit to Zikkah)
	      local PosX = barPos.x - 35
	      local PosY = barPos.y - 10
	      if KillText[i] ~= 10 then
	        DrawText(TextList[KillText[i]], 16, PosX, PosY, colorText)
	      else
	        DrawText(TextList[KillText[i]] .. string.format("%4.1f", ((enemy.health - (qDmg + pDmg + eDmg + itemsDmg)) * (1/rDmg)) * 2.5) .. "s = Kill", 16, PosX, PosY, colorText)
	      end
	    end
	end
  end
end
-- dynamic ks q
function GekkeKSQ()
  for i, target in ipairs(GetEnemyHeroes()) do
  qDmg = getDmg("Q", target, myHero)
  if ValidTarget(target, skills.SkillQ.range) and skills.SkillQ.ready and target.health < qDmg then
			local CastPosition,  HitChance,  Position = VP:GetLineCastPosition(target, skills.SkillQ.delay, skills.SkillQ.width, skills.SkillQ.range, skills.SkillQ.speed, myHero, true)
        if HitChance >= 2 and GetDistance(CastPosition) < 1000 then
				 CastSpell(_Q, CastPosition.x, CastPosition.z)
		end
  end
end
end
--  for a good ks combo
function GekkeKSRQ()
  for i, target in ipairs(GetEnemyHeroes()) do
    
    local ECAST = false
    local RCAST = false
  if ValidTarget(target, skills.SkillQ.range) and skills.SkillQ.ready and skills.SkillR.ready and skills.SkillE.ready then
    qDmg = getDmg("Q", target, myHero)
    rDmg = getDmg("R", target, myHero)
    gekkeDmg = GetMantraDMG()
    if target.health < rDmg + qDmg + gekkeDmg then 
      CastSpell(_E)
      ECAST = true
      if ECAST then
        CastSpell(_R)
        if Mantraa then
         
          local CastPosition, HitChance, Position = VP:GetLineCastPosition(target, skills.SkillQ.delay, skills.SkillQ.width, skills.SkillQ.range, skills.SkillQ.speed, myHero, true)
          if HitChance >= 2 and GetDistance(CastPosition) < 1100 then
				 CastSpell(_Q, CastPosition.x, CastPosition.z)
        end
      end
    end
  end
end
end
end
     
          

-- need it thaaaa karmaaaa ultiii
function OnGainBuff(unit, buff)
  if unit == nil or buff == nil or buff.name == nil then return end
    if unit.isMe ~= myHero.team and buff.name == "KarmaMantra" then
      Mantraa = true
    
      local time = GetGameTimer()
    end
  end
  --- just for joke if i don't let it here it will not work
  function OnLoseBuff(unit, buff)
  if unit == nil or buff == nil or buff.name == nil then return end
    if unit.isMe ~= myHero.team and buff.name == "AlZaharNetherGrasp"then
       Mantraa = false
    end
end
  




-- Dahm karma lvl'ulti 4 x

function GetMantraDMG()
        if myHero:GetSpellData(_R).level == 1 then
                return 75
        elseif myHero:GetSpellData(_R).level == 2 then
                return 225
        elseif myHero:GetSpellData(_R).level == 3 then
                return 375
        elseif myHero:GetSpellData(_R).level == 4 then
                return 525
        end
end         
      
      
 -- just simple escape function     
function ChaceMode()
  if skills.SkillE.ready then
    
    CastSpell(_E)
    
  end
end


function OnProcessSpell(object, spell)
  if object.team ~= myHero.team and not myHero.dead and not object.name:find("Minion_") or object.name:find("Odin") then
    local shieldREADY = typeshield ~= nil and myHero:CanUseSpell(spellslot) == READY
    local RaakEest = false -- dit was eerst hitfirst
    local shieldtarget,SlastDistance,SLastDmgPercent = nil,nil,nil
      BShield,SShield,shield,CC = false,false,false,false
      local shottype,radius,masdistance = 0,0,0
        if object.type =="AIHeroClient" then
          spelltype, casttype = getSpellType(object, spell.name)
          if spelltype == "BAttack" or spelltype == "CAttack" then
            Shield = false
            
          elseif spell.name:find("SummonerDot") then
           
           Shield = true
          elseif spelltype =="Q" or spelltype == "W" or spelltype == "R" or spelltype == "E" or spelltype == "P" or spelltype == "QM" or spelltype == "WM" or spelltype == "EM" then
           Shield = true
           
            if Shield and Menu.shield.Shieldd and skills.SkillE.ready then
                if target ~= nil and ValidTarget(target, 1000) then
              CastSpell(_E)


                  
                end
            end
          end
        end
  end
  end
function ComboP()
  if target ~= nil and typeCombo == 0 then
		ItemUsage(target)
  end
  if Menu.ProdSettings.SelectProdiction == 1 then 
    if skills.SkillR.ready and Menu.KarmaCombo.rSet.useR then
			CastSpell(_R)
      
		end
    if Menu.KarmaCombo.qSet.useQ and skills.SkillQ.ready and ValidTarget(target) then 
        ProdQ:GetPredictionCallBack(target, CastQ)
    end
    if Menu.KarmaCombo.wSet.useW and ValidTarget(target, skills.SkillW.range) and skills.SkillW.ready and not Mantra then
		    CastSpell(_W, target)
    end	
  end
end

function HarrasP()
  if target ~= nil and typeCombo == 0 then
		ItemUsage(target)
  end
  if Menu.ProdSettings.SelectProdiction == 1 then 
    if skills.SkillR.ready and Menu.Harass.useR then
			CastSpell(_R)
      
		end
    if Menu.Harass.useQ and skills.SkillQ.ready and ValidTarget(target) then 
        ProdQ:GetPredictionCallBack(target, CastQ)
    end
    
    if Menu.Harass.useW and ValidTarget(target, skills.SkillW.range) and skills.SkillW.ready and not Mantra then
		    CastSpell(_W, target)
    end	
  end
end

function CastQ(unit,pos)
  if Menu.KarmaCombo.combo or Menu.Harass.harass then
    if Menu.ProdSettings.SelectProdiction == 1 then 
     if GetDistance(pos) < skills.SkillQ.range and skills.SkillQ.ready and ValidTarget(target) then
        local coll = Collision(1000, 1800, 0.25, 70)
         if not coll:GetMinionCollision(pos, myHero) then
  
                CastSpell(_Q, pos.x, pos.z)
                --print("nog ff")
            end
    end
end
end
end

function GetQPos(unit, pos)
        qPos = pos
end

function OnBugsplat()
	UpdateWeb(false, ScriptName, id, HWID)
end

function OnUnload()
	UpdateWeb(false, ScriptName, id, HWID)
end



